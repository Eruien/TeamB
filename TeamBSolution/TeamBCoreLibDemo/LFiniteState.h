#pragma once
#include <map>
#include <memory>

enum class State
{
	NONE = 0,
	IDLE = 1,
	WALK = 2,
	CROUCH = 3,
	SILDE = 4,
	RUN = 5,
	AIRINHALE = 6,
	FLY = 7,
	AIROUTHALE = 8,
	FALL = 9,
	FLAPPING = 10,
	FIRSTINHALE,
	SECONDINHALE,
	FATIDLE,
	FATMODE,
	MODECHANGE,
	TAKEDAMAGE,
	USERDEAD,

	//BEAM
	BEAMIDLE,
	BEAMWALK,
	BEAMCROUCH,
	BEAMSILDE,
	BEAMRUN,
	BEAMAIRINHALE,
	BEAMFLY,
	BEAMAIROUTHALE,
	BEAMFALL,
	BEAMFLAPPING,
	BEAMATTACK,

	// Angel
	ANGELIDLE,
	ANGELWALK,
	ANGELCROUCH,
	ANGELSILDE,
	ANGELRUN,
	ANGELFLY,
	ANGELFALL,
	ANGELFLAPPING,
	ANGELATTACK,
	ANGELFLYIDLE,

	// Monster
	MOVE,
	TRACE,
	ATTACK,
	GOHOME,

	//Scene
	MAINSCENE,
	GAMESCENE,
	BOSSSCENE,
	ENDSCENE,

	// Boss
	BOSSIDLE,
	BOSSMOVE,
	BOSSSTAR,
	BOSSRAZERREADY,
	BOSSRAZER,
	BOSSTHICKRAZER,
	BOSSBOOM,
	BOSSDEAD,
};

enum class Event
{
	NONE = 0,
	INPUTLR = 1,
	KEYUP = 2,
	INPUTUP = 3,
	INPUTDOWN = 4,
	INPUTATTACK = 5,
	ENDSLIDETIME = 6,
	RUNTIME = 7,
	CHANGEFLY = 8,
	AIROUTENDTIME = 9,
	COLLISIONFLOOR = 10,
	CHANGEFLAPPING = 11,
	ENDINHALE,
	CHANGEABILITY,
	ABSORBMONSTER,
	INPUTCANCLE,
	ENDBEAMATTACK,
	ABSORBANGEL,
	CHANGEANGEL,
	HURT,
	ENDROLLING,

	//Monster
	FINDTARGET,
	ATTACKPOS,
	LOSTTARGET,
	ARRIVESTARTPOS,
	OUTATTACKRANGE,

	//Scene
	GONEXTSCENE,
	GOMAINSCENE,

	// Boss
	BOSSSTARATTACK,
	BOSSRAZERATTACK,
	BOSSBOOMATTACK,
	BOSSSTARTMOVE,
	BOSSENDPATTERN,
	
};

class LFiniteState
{
private:
	State m_State;
public:
	std::map<Event, State> m_StateMap;
public:
	State GetState() { return m_State; }
public:
	void AddTransition(Event inputEvent, State outputState);
	State Output(Event inputEvent);
public:
	LFiniteState(State state);
};

